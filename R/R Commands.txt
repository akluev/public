library ()
pipe %>%
where = filter
order by = arange
mutate 

assign <-

plotting - 
--------------------------
library(gapminder)
library(dplyr)
library(ggplot2)

gapminder %>% 
filter ( year == 1952)

gapminder_1952 <- gapminder %>% 
filter ( year == 1952)

ggplot(gapminder_1952, aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
  
  ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
  geom_point()
  
  --- scale scale_x_log10
  
  ggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +
  geom_point()+
  scale_x_log10()
   
  ggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +
  geom_point()+
  scale_x_log10()+
  scale_y_log10()
  
  --- aesthetics
  
  aes ( color= dim1 , size = dim2
  
  ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color= continent)) +
  geom_point()+
  scale_x_log10()

  --- faceting  = dividing to subgraphs

  ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color= continent)) +
  geom_point()+
  scale_x_log10()+
  facet_wrap ( ~continent) 
  
  ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color= continent, size = pop)) +
  geom_point()+
  facet_wrap ( ~year) 
  
  ---- summarize 
         mean
		 sum
		 median
		 min
		 max
		
 gapminder %>%
    filter ( year == 1957 ) %>%
   summarize (  medianLifeExp = median(lifeExp))

 gapminder %>%
    filter ( year == 1957 ) %>%
   summarize (  
     medianLifeExp = median(lifeExp),
     maxGdpPercap = max (gdpPercap)
   )
 
---- group_by 

 gapminder %>%
    group_by (year) %>%
   summarize (  
     medianLifeExp = median(lifeExp),
     maxGdpPercap = max (gdpPercap)
   )

 gapminder %>%
    filter ( year == 1957 ) %>%
    group_by (continent) %>%
   summarize (  
     medianLifeExp = median(lifeExp),
     maxGdpPercap = max (gdpPercap)
   )

 gapminder %>%
    group_by (year, continent) %>%
   summarize (  
     medianLifeExp = median(lifeExp),
     maxGdpPercap = max (gdpPercap)
   )


---- geom_plot () - scatter graph
 
 by_year <- gapminder %>%
  group_by(year) %>%
  summarize(medianLifeExp = median(lifeExp),
            maxGdpPercap = max(gdpPercap))

-------- expand_limits(y = 0)  includes 0

  ggplot(by_year, aes(x = year, y = medianLifeExp)) +
  expand_limits(y = 0)+ 
  geom_point()


 by_year_continent <- gapminder %>%
  group_by(year, continent) %>%
  summarize(
    medianLifeExp = median(lifeExp),
     medianGdpPercap = median(gdpPercap)
	)
			
			
  ggplot(by_year_continent, aes(x = year, y = medianGdpPercap, color = continent)) +
  expand_limits(y = 0)+ 
  geom_point()
  
 by_continent_2007 <- gapminder %>%
   filter ( year == 2007 ) %>%
   group_by(continent) %>%
  summarize(
     medianLifeExp = median(lifeExp),
     medianGdpPercap = median(gdpPercap)
	)


  ggplot(by_continent_2007, aes(x = medianGdpPercap, y = medianLifeExp, color = continent)) +
  geom_point()


--- typpes of graphgs

geom_line () - line plotting

by_year <- gapminder %>%
   group_by(year) %>%
  summarize(
     medianGdpPercap = median(gdpPercap)
	)
  
    ggplot(by_year, aes(y = medianGdpPercap, x = year)) +
  geom_line() +
  expand_limits(y = 0) 

  
  by_year_continent <- gapminder %>%
   group_by(year, continent) %>%
  summarize(
     medianGdpPercap = median(gdpPercap)
	)
  
    ggplot(by_year_continent, aes(y = medianGdpPercap, x = year, color=continent)) +
  geom_line() +
  expand_limits(y = 0) 

  -----------------
  
  geom_col () - bar plotting
  
  
  by_continent <- gapminder %>%
   filter ( year == 1952 ) %>%
   group_by(continent) %>%
  summarize(
     medianGdpPercap = median(gdpPercap)
	)

	    ggplot(by_continent, aes(y = medianGdpPercap, x = continent, color=continent)) +
  geom_col() 

 
 oceania_1952 <- gapminder %>%
   filter ( year == 1952, continent == "Oceania" ) 

	    ggplot(oceania_1952, aes(y = gdpPercap, x = country, color=country)) +
  geom_col() 
 
 ----------------------
 
 geom_histogram (binwidth  or bins  ) - histogram
 
 
 gapminder_1952 <- gapminder %>%
  filter(year == 1952) %>%
  mutate(pop_by_mil = pop / 1000000)
  
  
     ggplot(gapminder_1952, aes( x = pop_by_mil )) +
  geom_histogram (bins = 50) 

  ggplot(gapminder_1952, aes( x = pop )) +
	 scale_x_log10()+
  geom_histogram (bins = 50) 
  
  
---- box plots

geom_boxplot()

x= categoty 
y=value to compare

ggplot(gapminder_1952, aes( x = continent, y=gdpPercap))+
  geom_boxplot()+
  scale_y_log10()
  
add title

ggplot(gapminder_1952, aes(x = continent, y = gdpPercap)) +
  geom_boxplot() +
  scale_y_log10() +
  ggtitle(" Comparing GDP per capita across continents")
 
--------------------------

select () - extract 

glimpse() - shows columns 
counties %>% glimpse()

counties %>% select (
state,
county,
population,
poverty
)

counties_selected %>% arrange( desc(public_work) )
counties_selected %>% filter (state == "California", population > 1000000 )

counties_selected %>% filter (state == "Texas", population > 10000) %>% arrange (desc (private_work))
   
 
 -------------------------- 
  mutate 
  
  counties_selected %>%
  mutate ( public_workers = population * public_work/ 100)
  
  
  counties_selected <- counties %>% select (state, county, population, men, women)
  
  
 counties %>%
  # Select the five columns 
  select (state, county, population, men, women) %>%
  # Add the proportion_men variable
  mutate ( proportion_men =men /population ) %>%
  # Filter for population of at least 10,000
  filter ( population >= 10000) %>%
  # Arrange proportion of men in descending order 
  arrange (desc (proportion_men))
 
 
 ----------------------------------------------
 
 count 
 
 df %>% count ()
 
 count (  obc, sort = TRUE
 
 count ( wt  = , sort = TRUE
 
 counties_selected %>%
count (region, sort = TRUE)

counties_selected %>%
count (region,  wt=citizens,  sort= TRUE)
 
counties_selected %>%
  # Add population_walk containing the total number of people who walk to work 
  mutate ( population_walk = population*walk ) %>%
  # Count weighted by the new column
  count ( state, wt = population_walk, sort = TRUE) 
 
--------------------------------------

summarize
( 
var1 = func1(),
var2 = func2(),
...
)
 
function n() - count in summarize


counties_selected %>%
  summarize (
  min_population = min(population),
  max_unemployment = max(unemployment),
  average_income = mean(income)
  )

counties_selected %>%
  group_by(state) %>%
  summarize(total_area = sum(land_area),
            total_population = sum(population)) %>%
  mutate (density =total_population/ total_area) %>%
  arrange (desc (density) )  

  
  counties_selected %>%
  group_by(region, state) %>%
  summarize(total_pop = sum(population)) %>%
  group_by( region) %>%
  summarize(
   average_pop = mean(total_pop),
   median_pop=median(total_pop)
   )
   

-----------------------------------

ungroup ()

- removes firts grouping
 
 
-------------------------------------------


top_n  (  N, column)


counties_selected %>%
mutate ( wp = population*walk/100 ) %>%
  group_by ( region) %>%
  top_n ( 1, wp)
  
  
counties_selected %>%
  group_by(region, state) %>%
  # Calculate average income
  summarise (
  average_income = mean (income)
  ) %>%
  # Find the highest income state in each region
  top_n (1, average_income)  
  
 
 counties_selected %>%
  group_by(state, metro) %>%
  summarize(total_pop = sum(population)) %>%
  top_n(1, total_pop) %>%
  ungroup() %>%
  group_by (metro) %>%
  summarize ( st = n())
  
counties_selected %>%
  group_by(state, metro) %>%
  summarize(total_pop = sum(population)) %>%
  top_n(1, total_pop) %>%
  ungroup() %>%
count( metro)
----------------------------------------------------------------

glimpse() - shows table structure

    
-------------------------------------------------------------

select

range = columnA:columnB
contain ( "fragment" )	
starts_with ("fragment")
ends_with()
last_col()
remove = -columnA


counties %>%
  select (state, county, population, professional:production ) %>%
  arrange ( desc (service))

counties %>%
  select (state, county, ends_with("work")) %>%
  filter ( public_work >= 50)  
  
---------------------- 

rename ( new = old )
select * ......... , new = old )

counties %>%
  count(state) %>%
  rename ( num_counties = n )

counties %>%
select ( state, county,  poverty_rate= poverty)

-------------------------------------------------------

transmute

transmute ( ..... new_col =expression)

counties %>%
  transmute ( state, county, population, density = population/land_area ) %>%
  filter ( population > 1e6) %>%
  arrange (desc ( density))


---------------------------------------------

%in%

name %in c ("var1", ....[ "varN"])


# Filter for the names Steven, Thomas, and Matthew 
selected_names <- babynames %>% 
filter  ( name %in% c ( "Steven", "Thomas", 'Matthew'))


----------------------------------------

group_by() and mutate - like analytical function in Oracle

## Find year the name was most popular

babynames %>%
  group_by(year) %>%
  mutate( year_total = sum(number)) %>%
  ungroup() %>%
  mutate(fraction = number / year_total) %>%
  group_by(name) %>%
 # filter ( name  %in% c("Alex", 'Alexander')) %>%
  top_n (1,fraction )

  
babynames %>%
  group_by (name) %>%
  mutate ( name_total = sum(number))%>%
  mutate ( name_max = max(number))  

  
  # Filter for the names Steven, Thomas, and Matthew
names_filtered <- names_normalized %>%
filter  ( name %in% c ( "Steven", "Thomas", 'Matthew'))
  

# Visualize these names over time
ggplot (names_filtered, aes( x=year, y= fraction_max, color=name )) +
geom_line()

--------------------

window functions

lag  :
mulate ( diff = x - lag(x))

babynames_ratios_filtered <- babynames_fraction %>%
                     arrange(name, year) %>%
                     group_by(name) %>%
                     mutate(ratio = fraction / lag(fraction)) %>%
                     filter(fraction >= 0.00001)
					 
babynames_ratios_filtered %>%
  # Extract the largest ratio from each name 
  ungroup() %>%
  group_by ( year) %>%
  top_n ( 1, ratio)%>%
  # Sort the ratio column in descending order 
  arrange ( desc(ratio)) %>%
  # Filter for fractions greater than or equal to 0.001
  filter (fraction >= 0.001)
  

---------------

filter :

 | = or ?
 
----

x <- read_csv("path")

--- to_date

handwashing_start = as.Date('1847-06-01')


--------------------------------------------------------

Optimizing 

$ - indexing : version$major  


function : 
----------------

func_name <- functioin ( argument ) body

system.time - CPU and elepsed times

# How long does it take to read movies from CSV?
system.time(read.csv("movies.csv"))

# How long does it take to read movies from RDS?
system.time(readRDS("movies.rds"))

library(microbenchmark)

# Compare the two functions
compare <- microbenchmark(read.csv("movies.csv"), 
                          readRDS( "movies.rds"), 
                          times = 10)

# Print compare
compare







  